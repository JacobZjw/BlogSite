<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jacob&#39;s blog</title>
  
  <subtitle>生命不息，奋斗不止！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.jbblogs.cn/"/>
  <updated>2019-07-11T16:19:21.508Z</updated>
  <id>https://www.jbblogs.cn/</id>
  
  <author>
    <name>Jacob</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习笔记（三）——字符串及其输入与格式化输出</title>
    <link href="https://www.jbblogs.cn/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E5%85%B6%E8%BE%93%E5%85%A5%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"/>
    <id>https://www.jbblogs.cn/Python学习笔记（三）——字符串及其输入与格式化输出/</id>
    <published>2019-07-11T13:29:27.000Z</published>
    <updated>2019-07-11T16:19:21.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串简述"><a href="#字符串简述" class="headerlink" title="字符串简述"></a>字符串简述</h2><p>字符串是<code>Python</code>中最常用的数据类型。在<code>Python</code>中，用引号括起来的都是字符串，其中引号可以是单引号，也可以是双引号。创建字符串很简单，只需要为变量分配一个值即可，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Hello world !'</span></span><br><span class="line">str2 = <span class="string">"Welcome to Jacob's Blogs !"</span></span><br></pre></td></tr></table></figure><p>在<code>Python</code>中可以根据实际情况选择使用单引号或者双引号。例如当我们想在字符串中包含引号或撇号时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'I told my friend, "Python is my favorite language!"'</span></span><br><span class="line">str2 = <span class="string">"The language 'Python' is named after Monty Python, not the snake."</span></span><br><span class="line">print(str1)</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I told my friend, &quot;Python is my favorite language!&quot;</span><br><span class="line">The language &apos;Python&apos; is named after Monty Python, not the snake.</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="字符串的输入"><a href="#字符串的输入" class="headerlink" title="字符串的输入"></a>字符串的输入</h2><h3 id="Python2-x"><a href="#Python2-x" class="headerlink" title="Python2.x"></a>Python2.x</h3><p>在 <code>Python2.x</code> 中 <code>raw_input( )</code> 和<code>input( )</code>，两个函数都存在，其中区别为:</p><ul><li><strong><code>raw_input( )</code></strong> 将所有输入作为字符串看待，返回字符串类型。</li><li><strong><code>input( )</code></strong> 只能接收”数字”的输入，在对待纯数字输入时具有自己的特性，它返回所输入的数字的类型（ <code>int</code>, <code>float</code> ）。</li></ul><blockquote><p><strong>注意：</strong><code>input()</code> 和 <code>raw_input()</code> 这两个函数均能接收 字符串 ，但 <code>raw_input()</code> 直接读取控制台的输入（任何类型的输入它都可以接收）。而对于 <code>input()</code> ，它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 <code>SyntaxError</code> 。</p><p>除非对 input() 有特别需要，否则一般情况下都是推荐使用 raw_input() 来与用户交互。</p></blockquote><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python2.x: input() 需要输入 python 表达式</span></span><br><span class="line">&gt;&gt;&gt;a = input(<span class="string">"input:"</span>)</span><br><span class="line">input:<span class="number">123</span>                  <span class="comment"># 输入整数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;type <span class="string">'int'</span>&gt;               <span class="comment"># 整型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = input(<span class="string">"input:"</span>)    </span><br><span class="line">input:<span class="string">"runoob"</span>           <span class="comment"># 正确，字符串表达式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;             <span class="comment"># 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = input(<span class="string">"input:"</span>)</span><br><span class="line">input:runoob               <span class="comment"># 报错，不是表达式</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'runoob'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python2.x: raw_input() 将所有输入作为字符串看待</span></span><br><span class="line">&gt;&gt;&gt;a = raw_input(<span class="string">"input:"</span>)</span><br><span class="line">input:<span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;              <span class="comment"># 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = raw_input(<span class="string">"input:"</span>)</span><br><span class="line">input:runoob</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;              <span class="comment"># 字符串</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="Python3-x"><a href="#Python3-x" class="headerlink" title="Python3.x"></a>Python3.x</h3><p><code>Python3.x</code>对<strong><code>raw_input( )</code></strong> 和 <strong><code>input( )</code></strong> 进行了整合，去除了 <strong><code>raw_input( )</code></strong>，仅保留了 <strong><code>input( )</code></strong> 函数，其接收任意输入，将所有输入默认为字符串处理，并返回字符串类型。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.2.3 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user=raw_input(<span class="string">"please input:"</span>)                 <span class="comment">#没有了raw_input,因此报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'raw_input'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user=input(<span class="string">"please input:"</span>)</span><br><span class="line">please input:wei</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user</span><br><span class="line"><span class="string">'wei'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user=input(<span class="string">"please input:"</span>)                     <span class="comment">#input的输出结果都是作为字符串</span></span><br><span class="line">please input:<span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user</span><br><span class="line"><span class="string">'123'</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><code>python3</code> 里 <code>input()</code> 默认接收到的是 <code>str</code> 类型。</p></blockquote><h2 id="字符串的格式化输出"><a href="#字符串的格式化输出" class="headerlink" title="字符串的格式化输出"></a>字符串的格式化输出</h2><h4 id="Python字符串格式化符号："><a href="#Python字符串格式化符号：" class="headerlink" title="Python字符串格式化符号："></a>Python字符串格式化符号：</h4><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>格式化字符及其ASCII码</td></tr><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%d</td><td>格式化整数</td></tr><tr><td>%u</td><td>格式化无符号整型</td></tr><tr><td>%o</td><td>格式化无符号八进制数</td></tr><tr><td>%x</td><td>格式化无符号十六进制数</td></tr><tr><td>%X</td><td>格式化无符号十六进制数（大写）</td></tr><tr><td>%f</td><td>格式化浮点数字，可指定小数点后的精度</td></tr><tr><td>%e</td><td>用科学计数法格式化浮点数</td></tr><tr><td>%E</td><td>作用同%e，用科学计数法格式化浮点数</td></tr><tr><td>%g</td><td>%f和%e的简写</td></tr><tr><td>%G</td><td>%f 和 %E 的简写</td></tr><tr><td>%p</td><td>用十六进制数格式化变量的地址</td></tr></tbody></table><h4 id="Python字符串运算符"><a href="#Python字符串运算符" class="headerlink" title="Python字符串运算符"></a>Python字符串运算符</h4><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>+</code></td><td style="text-align:left">字符串连接</td></tr><tr><td style="text-align:left"><code>*</code></td><td style="text-align:left">重复输出字符串</td></tr><tr><td style="text-align:left"><code>[]</code></td><td style="text-align:left">通过索引获取字符串中字符</td></tr><tr><td style="text-align:left"><code>[ : ]</code></td><td style="text-align:left">截取字符串中的一部分，遵循<strong>左闭右开</strong>原则，<code>str[0,2]</code> 是不包含第 3 个字符的。</td></tr><tr><td style="text-align:left"><code>in</code></td><td style="text-align:left">成员运算符 - 如果字符串中<code>包含</code>给定的字符返回 <code>True</code></td></tr><tr><td style="text-align:left"><code>not in</code></td><td style="text-align:left">成员运算符 - 如果字符串中<code>不包含</code>给定的字符返回<code>True</code></td></tr><tr><td style="text-align:left"><code>r/R</code></td><td style="text-align:left">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 <strong>r</strong>（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td></tr><tr><td style="text-align:left"><code>%</code></td><td style="text-align:left">格式字符串</td></tr></tbody></table><h5 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h5><h5 id="字符串的截取"><a href="#字符串的截取" class="headerlink" title="字符串的截取"></a>字符串的截取</h5><h4 id="转义字符表"><a href="#转义字符表" class="headerlink" title="转义字符表"></a>转义字符表</h4><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\</code>(在行尾时)</td><td>续行符</td></tr><tr><td><code>\\</code></td><td>反斜杠符号</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\a</code></td><td>响铃</td></tr><tr><td><code>\b</code></td><td>退格(Backspace)</td></tr><tr><td><code>\000</code></td><td>空</td></tr><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\v</code></td><td>纵向制表符</td></tr><tr><td><code>\t</code></td><td>横向制表符</td></tr><tr><td><code>\r</code></td><td>回车</td></tr><tr><td><code>\f</code></td><td>换页</td></tr><tr><td><code>\oyy</code></td><td>八进制数，<code>yy</code>代表的字符，例如：<code>\o12</code>代表换行</td></tr><tr><td><code>\xyy</code></td><td>十六进制数，<code>yy</code>代表的字符，例如：<code>\x0a</code>代表换行</td></tr><tr><td><code>\other</code></td><td>其它的字符以普通格式输出</td></tr></tbody></table><h4 id="Python三引号"><a href="#Python三引号" class="headerlink" title="Python三引号"></a>Python三引号</h4><p>在<code>Python 3</code>中，字符是以<code>Unicode</code>编码的，也就是说，<code>Python</code>的字符串支持多语言</p><p><code>Python</code>不支持单字符类型，单字符类型在<code>Python</code>中也是作为一个字符串使用.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符串简述&quot;&gt;&lt;a href=&quot;#字符串简述&quot; class=&quot;headerlink&quot; title=&quot;字符串简述&quot;&gt;&lt;/a&gt;字符串简述&lt;/h2&gt;&lt;p&gt;字符串是&lt;code&gt;Python&lt;/code&gt;中最常用的数据类型。在&lt;code&gt;Python&lt;/code&gt;中，用引号括起来的都是字符串，其中引号可以是单引号，也可以是双引号。创建字符串很简单，只需要为变量分配一个值即可，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;str1 = &lt;span class=&quot;string&quot;&gt;&#39;Hello world !&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str2 = &lt;span class=&quot;string&quot;&gt;&quot;Welcome to Jacob&#39;s Blogs !&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;Python&lt;/code&gt;中可以根据实际情况选择使用单引号或者双引号。例如当我们想在字符串中包含引号或撇号时：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;str1 = &lt;span class=&quot;string&quot;&gt;&#39;I told my friend, &quot;Python is my favorite language!&quot;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str2 = &lt;span class=&quot;string&quot;&gt;&quot;The language &#39;Python&#39; is named after Monty Python, not the snake.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(str1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(str2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;I told my friend, &amp;quot;Python is my favorite language!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The language &amp;apos;Python&amp;apos; is named after Monty Python, not the snake.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.jbblogs.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://www.jbblogs.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>自动备份Hexo源文件</title>
    <link href="https://www.jbblogs.cn/%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    <id>https://www.jbblogs.cn/自动备份Hexo源文件/</id>
    <published>2019-07-10T06:48:16.000Z</published>
    <updated>2019-07-10T09:06:36.515Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>配置一个<code>Hexo</code>博客往往需要作者倾注大量心血，而如果哪天电脑坏了或者换电脑导致<code>Hexo</code>源文件丢失的话就是一件比较杯具的事。因此本文给出了一种自动备份<code>Hexo</code>源文件到<code>Github</code>的方法，能够在执行<code>hexo deploy</code>命令后自动执行<code>Git</code>命令以推送<code>Hexo</code>源文件到<code>Github</code>仓库。</p><a id="more"></a><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><code>NodeJS</code>的事件监听机制能够监听<code>Hexo</code>的事件。通过查询<a href="https://hexo.io/zh-cn/api/events.html" target="_blank" rel="noopener">Hexo文档</a>，找到了<code>Hexo</code>的主要事件，见下表：</p><table><thead><tr><th style="text-align:left">事件名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>deployBefore</code></td><td style="text-align:left">在部署完成前发布。</td></tr><tr><td style="text-align:left"><code>deployAfter</code></td><td style="text-align:left">在部署成功后发布。</td></tr><tr><td style="text-align:left"><code>exit</code></td><td style="text-align:left">在<code>Hexo</code> 结束前发布。</td></tr><tr><td style="text-align:left"><code>generateBefore</code></td><td style="text-align:left">在静态文件生成前发布。</td></tr><tr><td style="text-align:left"><code>generateAfter</code></td><td style="text-align:left">在静态文件生成后发布。</td></tr><tr><td style="text-align:left"><code>new</code></td><td style="text-align:left">在文章文件建立后发布。该事件返回文章参数。</td></tr><tr><td style="text-align:left"><code>processBefore</code></td><td style="text-align:left">在处理原始文件前发布。此事件会返回一个地址，代表 Box（Box）的根目录。</td></tr><tr><td style="text-align:left"><code>processAfter</code></td><td style="text-align:left">在原始文件处理后发布。此事件会返回一个地址，代表 Box（Box）的根目录。</td></tr><tr><td style="text-align:left"><code>ready</code></td><td style="text-align:left">在初始化完成后发布。</td></tr></tbody></table><p>通过查询上表发现，我们可以通过监听<code>Hexo</code>的<code>deployAfter</code>事件，待部署成功后自动运行<code>Git</code>备份命令，从而达到自动备份的目的。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="将Hexo目录加入Git仓库"><a href="#将Hexo目录加入Git仓库" class="headerlink" title="将Hexo目录加入Git仓库"></a>将<code>Hexo</code>目录加入<code>Git</code>仓库</h5><p>首先需要在<code>Github</code>创建一个新的<code>repository</code>,名字与本地<code>Hexo</code>文件夹同名即可。然后进入本地<code>Hexo</code>文件夹，按顺序执行以下命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:yourname/hexo.git</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>再每次执行<code>hexo generate</code>命令时，<code>public/</code>、<code>.deploy</code>、<code>*.log</code>文件夹会重写更新，因此需要在<code>.gitignore</code>文件（如果没有，手动创建一个）中写入<code>public/</code>、<code>.deploy</code>、<code>*.log</code>以忽略这几个目录，加快备份的速度。</p><p>然后再顺序执行以下命令，将文件推送到<code>Github</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "备份hexo源码文件"</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>这三行命令便是手动推送本地文件到<code>Github</code>的命令,我们接下来要做的是让<code>NodeJS</code>监听到<code>Hexo</code>的<code>deployAfter</code>事件后自动执行上述命令。</p><h5 id="安装shelljs模块"><a href="#安装shelljs模块" class="headerlink" title="安装shelljs模块"></a>安装<code>shelljs</code>模块</h5><p>键入以下命令即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save shelljs</span><br></pre></td></tr></table></figure><h5 id="加入自动执行脚本"><a href="#加入自动执行脚本" class="headerlink" title="加入自动执行脚本"></a>加入自动执行脚本</h5><p>在<code>Hexo</code>根目录的<code>scripts</code>文件夹（没有就自己创建一个）下新建一个<code>js</code>文件，文件名随意。然后加入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'shelljs/global'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">hexo.on(<span class="string">'deployAfter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//当deploy完成后执行备份</span></span><br><span class="line">run();</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"产生了一个错误&lt;(￣3￣)&gt; !，错误详情为："</span> + e.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!which(<span class="string">'git'</span>)) &#123;</span><br><span class="line">echo(<span class="string">'Sorry, this script requires git'</span>);</span><br><span class="line">exit(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">echo(<span class="string">"======================Auto Backup Begin==========================="</span>);</span><br><span class="line">cd(<span class="string">'path to hexo'</span>);    <span class="comment">//此处修改为Hexo根目录路径</span></span><br><span class="line"><span class="keyword">if</span> (exec(<span class="string">'git add --all'</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">echo(<span class="string">'Error: Git add failed'</span>);</span><br><span class="line">exit(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (exec(<span class="string">'git commit -am "Form auto backup script\'s commit"'</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">echo(<span class="string">'Error: Git commit failed'</span>);</span><br><span class="line">exit(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (exec(<span class="string">'git push origin master'</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">echo(<span class="string">'Error: Git push failed'</span>);</span><br><span class="line">exit(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">echo(<span class="string">"==================Auto Backup Complete============================"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上述代码中第29行需要修改为自己<code>Hexo</code>文件夹的绝对路径。</p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>如果脚本运行成功，会得到类似以下的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">======================Auto Backup Begin===========================</span><br><span class="line">cd: no such file or directory: ‪C:/Users/17810/OneDrive/hexo</span><br><span class="line">warning: LF will be replaced by CRLF in source/_posts/自动备份Hexo源文件.md.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in source/_posts/自动备份Hexo源文件.md.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">[master a6cb4c7] Form auto backup script&apos;s commit</span><br><span class="line"> 1 file changed, 153 insertions(+)</span><br><span class="line">warning: LF will be replaced by CRLF in source/_posts/自动备份Hexo源文件.md.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">To git@github.com:JacobZjw/hexo.git</span><br><span class="line">   0beaf4c..a6cb4c7  master -&gt; master</span><br><span class="line">==================Auto Backup Complete============================</span><br></pre></td></tr></table></figure><h4 id="懒癌患者的小福利"><a href="#懒癌患者的小福利" class="headerlink" title="懒癌患者的小福利"></a>懒癌患者的小福利</h4><p>在<code>hexo</code>中，我们常常使用<code>hexo new</code>命令来新建文章。然鹅，当我们的文章较多时，我们往往需要在成堆的文章中找到刚刚生成的文件，然后使用<code>Markdown</code>编辑器打开。作为一名懒癌患者怎么可能让自己如此受累。</p><p>于是，我找到了<code>Hexo</code>作者给出的解决办法</p><p>和上面类似，在<code>scripts</code>文件夹中创建一个<code>js</code>文件，添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 2.x 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">  spawn(<span class="string">'start  "markdown编辑器绝对路径.exe" '</span> + path);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  spawn(<span class="string">'start  "markdown编辑器绝对路径.exe" '</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>保存并退出脚本之后，在命令行中键入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;auto open editor test&quot;</span><br></pre></td></tr></table></figure><p>是不是就顺利的自动打开了自动生成的md文件啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;配置一个&lt;code&gt;Hexo&lt;/code&gt;博客往往需要作者倾注大量心血，而如果哪天电脑坏了或者换电脑导致&lt;code&gt;Hexo&lt;/code&gt;源文件丢失的话就是一件比较杯具的事。因此本文给出了一种自动备份&lt;code&gt;Hexo&lt;/code&gt;源文件到&lt;code&gt;Github&lt;/code&gt;的方法，能够在执行&lt;code&gt;hexo deploy&lt;/code&gt;命令后自动执行&lt;code&gt;Git&lt;/code&gt;命令以推送&lt;code&gt;Hexo&lt;/code&gt;源文件到&lt;code&gt;Github&lt;/code&gt;仓库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://www.jbblogs.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记（二）——数字类型的运算及其输入与格式化输出</title>
    <link href="https://www.jbblogs.cn/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BF%90%E7%AE%97%E5%8F%8A%E5%85%B6%E8%BE%93%E5%85%A5%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"/>
    <id>https://www.jbblogs.cn/Python学习笔记（二）——数字类型的运算及其输入与格式化输出/</id>
    <published>2019-07-07T14:50:17.000Z</published>
    <updated>2019-07-08T07:57:53.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h1><p><code>Python</code>中数字有四种类型：整数、布尔型、浮点数和复数。</p><ul><li><p><strong>int</strong> (整型), 如 1, 只有一种整数类型 <code>int</code>，表示为长整型，没有<code>python2</code> 中的 <code>long</code>。</p></li><li><p><strong>bool</strong> (布尔型), 如<code>True</code>。</p></li><li><p><strong>float</strong> (浮点型), 如 <code>1.23</code>、<code>3E-2</code></p></li><li><p><strong>complex</strong> (复数型), 如 <code>1 + 2j</code>、 <code>1.1 + 2.2j</code></p><a id="more"></a></li></ul><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p><code>Python</code>中可以处理任意大小（即无限大小）的整数（<code>Python 2.x</code>中有<code>int</code>和<code>long</code>两种类型的整数，但这种区分对<code>Python</code>来说意义不大，因此在<code>Python 3.x</code>中整数只有<code>int</code>这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是<code>256</code>）的表示法。</p><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p><code>Python</code>将带小数点的数字统称为浮点数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</p><h2 id="复数型"><a href="#复数型" class="headerlink" title="复数型"></a>复数型</h2><p>形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。</p><h1 id="运算符及运算"><a href="#运算符及运算" class="headerlink" title="运算符及运算"></a>运算符及运算</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加——两个对象相加</td></tr><tr><td>-</td><td>减——一个数减去另一个数</td></tr><tr><td>*</td><td>乘——两个数相乘或者得到一个被重复若干次的字符串</td></tr><tr><td>/</td><td>除——x除以y</td></tr><tr><td>%</td><td>取模——返回除法的余数</td></tr><tr><td>**</td><td>幂——返回x的y次幂</td></tr><tr><td>//</td><td>取整数——返回商的余数</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">121</span></span><br><span class="line">b=<span class="number">10</span></span><br><span class="line">print(<span class="string">'%d + %d =\t%d'</span> %(a,b,a+b))<span class="comment">#相加</span></span><br><span class="line">print(<span class="string">'%d - %d =\t%d'</span> %(a,b,a-b))<span class="comment">#相减</span></span><br><span class="line">print(<span class="string">'%d * %d =\t%d'</span> %(a,b,a*b))<span class="comment">#相乘</span></span><br><span class="line">print(<span class="string">'%d / %d = \t%f'</span> % (a, b, a / b))<span class="comment">#相除</span></span><br><span class="line">print(<span class="string">'%d // %d = \t%d'</span> % (a, b, a // b))<span class="comment">#整除</span></span><br><span class="line">print(<span class="string">'%d %% %d = \t%d'</span> % (a, b, a % b))<span class="comment">#取模</span></span><br><span class="line">print(<span class="string">'%d ** %d = \t%d'</span> % (a, b, a ** b))<span class="comment">#幂</span></span><br></pre></td></tr></table></figure><p>运算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">121</span> + <span class="number">10</span> =      <span class="number">131</span></span><br><span class="line"><span class="number">121</span> - <span class="number">10</span> =      <span class="number">111</span></span><br><span class="line"><span class="number">121</span> * <span class="number">10</span> =      <span class="number">1210</span></span><br><span class="line"><span class="number">121</span> / <span class="number">10</span> =      <span class="number">12.100000</span></span><br><span class="line"><span class="number">121</span> // <span class="number">10</span> =     <span class="number">12</span></span><br><span class="line"><span class="number">121</span> % <span class="number">10</span> =      <span class="number">1</span></span><br><span class="line"><span class="number">121</span> ** <span class="number">10</span> =     <span class="number">672749994932560009201</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td><strong>c=a+b将a+b运算结果赋值为<code>c</code></strong></td></tr><tr><td>+=</td><td><strong>c+=a等价于c=c+a</strong></td></tr><tr><td>-=</td><td><strong>c-=a等价于c=c-a</strong></td></tr><tr><td>*=</td><td><strong>c*=a等价于c=c*a</strong></td></tr><tr><td>/=</td><td><strong>c/=a等价于c=c/a</strong></td></tr><tr><td>%=</td><td><strong>c%=a等价于c=c%a</strong></td></tr><tr><td>**=</td><td><strong>c* * =a等价于c=c* *a</strong></td></tr><tr><td>//=</td><td><strong>c//=a等价于c=c//a</strong></td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>Python语言支持以下逻辑运算符。假设变量<code>a</code>的值为<code>True</code>，变量<code>b</code>的值为<code>False</code>，那么 -</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>and</code></td><td>如果两个操作数都为真，则条件成立。</td><td><code>(a and b)</code>的结果为<code>False</code></td></tr><tr><td><code>or</code></td><td>如果两个操作数中的任何一个非零，则条件成为真。</td><td><code>(a or b)</code>的结果为<code>True</code></td></tr><tr><td><code>not</code></td><td>用于反转操作数的逻辑状态。</td><td><code>not(a and b)</code> 的结果为<code>True</code></td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span></span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2</span><br><span class="line">flag4 = flag1 <span class="keyword">or</span> flag2</span><br><span class="line">flag5 = <span class="keyword">not</span> flag1</span><br><span class="line">print(<span class="string">"flag1 = "</span>, flag1)</span><br><span class="line">print(<span class="string">"flag2 = "</span>, flag2)</span><br><span class="line">print(<span class="string">"flag3 = "</span>, flag3)</span><br><span class="line">print(<span class="string">"flag4 = "</span>, flag4)</span><br><span class="line">print(<span class="string">"flag5 = "</span>, flag5)</span><br><span class="line">print(flag1 <span class="keyword">is</span> <span class="literal">True</span>)</span><br><span class="line">print(flag2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>运算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag1 =  <span class="literal">True</span></span><br><span class="line">flag2 =  <span class="literal">False</span></span><br><span class="line">flag3 =  <span class="literal">False</span></span><br><span class="line">flag4 =  <span class="literal">True</span></span><br><span class="line">flag5 =  <span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="按位运算符"><a href="#按位运算符" class="headerlink" title="按位运算符"></a>按位运算符</h2><p>设变量a=60,b=13;则二进制a表示为：00111100，b表示为：00001101</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>二进制与。如果它存在于两个操作数中，则操作符复制位到结果中</td><td><code>(a &amp; b)</code> 结果表示为 <code>00001100</code></td></tr><tr><td>`</td><td>`</td><td>二进制或，如果它存在于任一操作数，则复制位。</td><td>`(a</td><td>b)=61<code>结果表示为</code>00111101`</td></tr><tr><td><code>^</code></td><td>二进制异或，如果它是一个操作数集合，但不是同时是两个操作数则将复制位。</td><td><code>(a ^ b) = 49</code> 结果表示为 <code>00110001</code></td></tr><tr><td><code>~</code></td><td>二进制补码，它是一元的，具有“翻转”的效果。</td><td><code>(~a ) = -61</code>有符号的二进制数，表示为<code>11000011</code>的补码形式</td></tr><tr><td><code>&lt;&lt;</code></td><td>二进制左移，左操作数的值由右操作数指定的位数左移。</td><td><code>a &lt;&lt; 2 = 240</code> 结果表示为 <code>11110000</code></td></tr><tr><td><code>&gt;&gt;</code></td><td>二进制右移，左操作数的值由右操作数指定的位数右移。</td><td><code>a &gt;&gt; 2 = 15</code>结果表示为<code>00001111</code></td></tr></tbody></table><p><code>Python</code>的内置函数<code>bin()</code>可用于获取整数的二进制表示形式。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">60</span>            <span class="comment"># 60 = 0011 1100</span></span><br><span class="line">b = <span class="number">13</span>            <span class="comment"># 13 = 0000 1101</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'a='</span>,a,<span class="string">':'</span>,bin(a),<span class="string">'b='</span>,b,<span class="string">':'</span>,bin(b))</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c = a &amp; b;        <span class="comment"># 12 = 0000 1100</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"result of AND is "</span>, c,<span class="string">':'</span>,bin(c))</span><br><span class="line"></span><br><span class="line">c = a | b;        <span class="comment"># 61 = 0011 1101 </span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"result of OR is "</span>, c,<span class="string">':'</span>,bin(c))</span><br><span class="line"></span><br><span class="line">c = a ^ b;        <span class="comment"># 49 = 0011 0001</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"result of EXOR is "</span>, c,<span class="string">':'</span>,bin(c))</span><br><span class="line"></span><br><span class="line">c = ~a;           <span class="comment"># -61 = 1100 0011</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"result of COMPLEMENT is "</span>, c,<span class="string">':'</span>,bin(c))</span><br><span class="line"></span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>;       <span class="comment"># 240 = 1111 0000</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"result of LEFT SHIFT is "</span>, c,<span class="string">':'</span>,bin(c))</span><br><span class="line"></span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>;       <span class="comment"># 15 = 0000 1111</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"result of RIGHT SHIFT is "</span>, c,<span class="string">':'</span>,bin(c))</span><br></pre></td></tr></table></figure><p>运算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a= <span class="number">60</span> : <span class="number">0b111100</span> b= <span class="number">13</span> : <span class="number">0b1101</span></span><br><span class="line">result of AND <span class="keyword">is</span>  <span class="number">12</span> : <span class="number">0b1100</span></span><br><span class="line">result of OR <span class="keyword">is</span>  <span class="number">61</span> : <span class="number">0b111101</span></span><br><span class="line">result of EXOR <span class="keyword">is</span>  <span class="number">49</span> : <span class="number">0b110001</span></span><br><span class="line">result of COMPLEMENT <span class="keyword">is</span>  <span class="number">-61</span> : <span class="number">-0</span>b111101</span><br><span class="line">result of LEFT SHIFT <span class="keyword">is</span>  <span class="number">240</span> : <span class="number">0b11110000</span></span><br><span class="line">result of RIGHT SHIFT <span class="keyword">is</span>  <span class="number">15</span> : <span class="number">0b1111</span></span><br></pre></td></tr></table></figure><h2 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>in</code></td><td>如果在指定的序列中找到一个变量的值，则返回<code>true</code>，否则返回<code>false</code>。</td></tr><tr><td><code>not int</code></td><td>如果在指定序列中找不到变量的值，则返回<code>true</code>，否则返回<code>false</code>。</td></tr></tbody></table><h2 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>is</code></td><td>如果运算符任一侧的变量指向相同的对象，则返回<code>True</code>，否则返回<code>False</code>。</td></tr><tr><td><code>is not</code></td><td>如果运算符任一侧的变量指向相同的对象，则返回<code>True</code>，否则返回<code>False</code>。</td></tr></tbody></table><h1 id="基本输入与格式化输出"><a href="#基本输入与格式化输出" class="headerlink" title="基本输入与格式化输出"></a>基本输入与格式化输出</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>使用<code>input([prompt])</code>读取一行，将其转换为<code>string</code>类型并返回。<code>input</code>的参数可有可无，如果有参数的话，会在控制台（可以这样理解）输出参数的内容，不换行。通常情况下我们在控制台输入一些数据，然后敲击回车，就完成了本次输入。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"Please enter your name: "</span>)</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><p>运算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter your name: Jacob</span><br><span class="line">Jacob</span><br></pre></td></tr></table></figure><p>这里要注意的是，<code>input</code>返回的是<code>string</code>类型，如果想输入数字，还需要进行类型转换，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = int(input(<span class="string">"Enter a number: "</span>))</span><br><span class="line">print(num*<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter a number: <span class="number">4</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><p><code>Python</code>字符串格式化符号：</p><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>格式化字符及其ASCII码</td></tr><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%d</td><td>格式化整数</td></tr><tr><td>%u</td><td>格式化无符号整型</td></tr><tr><td>%o</td><td>格式化无符号八进制数</td></tr><tr><td>%x</td><td>格式化无符号十六进制数</td></tr><tr><td>%X</td><td>格式化无符号十六进制数（大写）</td></tr><tr><td>%f</td><td>格式化浮点数字，可指定小数点后的精度</td></tr><tr><td>%e</td><td>用科学计数法格式化浮点数</td></tr><tr><td>%E</td><td>作用同%e，用科学计数法格式化浮点数</td></tr><tr><td>%g</td><td>%f和%e的简写</td></tr><tr><td>%G</td><td>%f 和 %E 的简写</td></tr><tr><td>%p</td><td>用十六进制数格式化变量的地址</td></tr></tbody></table><p>格式化操作符辅助指令：</p><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>定义宽度或者小数点精度</td></tr><tr><td>-</td><td>用做左对齐</td></tr><tr><td>+</td><td>在正数前面显示加号( + )，在负数前面显示减号（-）</td></tr><tr><td><code>&lt;sp&gt;</code></td><td>在正数前面显示空格</td></tr><tr><td>#</td><td>在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td>0</td><td>显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td>%</td><td>‘%%’输出一个单一的’%’</td></tr><tr><td><code>(var)</code></td><td>映射变量(字典参数)</td></tr><tr><td><code>m.n.</code></td><td>m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table><h3 id="格式化输出整数"><a href="#格式化输出整数" class="headerlink" title="格式化输出整数"></a>格式化输出整数</h3><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">123</span></span><br><span class="line">print(a + b)</span><br><span class="line">print(<span class="string">'%d + %d = %d'</span> % (a, b, a + b))</span><br><span class="line">print(<span class="string">'%d + %d = %+d'</span> % (a, b, a + b))</span><br><span class="line">print(<span class="string">'%d + %d = %06d'</span> % (a, b, a + b))</span><br><span class="line">print(<span class="string">'%d + %d = %.6d'</span> % (a, b, a + b))</span><br><span class="line">print(<span class="string">"a + b= "</span>,a+b)</span><br></pre></td></tr></table></figure><p>运算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">444</span></span><br><span class="line"><span class="number">321</span> + <span class="number">123</span> = <span class="number">444</span></span><br><span class="line"><span class="number">321</span> + <span class="number">123</span> = +<span class="number">444</span></span><br><span class="line"><span class="number">321</span> + <span class="number">123</span> = <span class="number">000444</span></span><br><span class="line"><span class="number">321</span> + <span class="number">123</span> = <span class="number">000444</span></span><br><span class="line">a + b=  <span class="number">444</span></span><br></pre></td></tr></table></figure><h3 id="格式化输出16进制，十进制，八进制整数"><a href="#格式化输出16进制，十进制，八进制整数" class="headerlink" title="格式化输出16进制，十进制，八进制整数"></a>格式化输出16进制，十进制，八进制整数</h3><p><strong>#%x</strong> — <code>hex</code> 十六进制</p><p><strong>#%d</strong> — <code>dec</code> 十进制</p><p><strong>#%o</strong> — <code>oct</code> 八进制</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nHex = <span class="number">1024</span></span><br><span class="line">print(<span class="string">"nHex = %x,nDec = %d,nOct = %o"</span> %(nHex,nHex,nHex))</span><br><span class="line">nHex = <span class="number">0xFF</span></span><br><span class="line">print(<span class="string">"nHex = %x,nDec = %d,nOct = %o"</span> %(nHex,nHex,nHex))</span><br></pre></td></tr></table></figure><p>运算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nHex = <span class="number">400</span>,nDec = <span class="number">1024</span>,nOct = <span class="number">2000</span></span><br><span class="line">nHex = ff,nDec = <span class="number">255</span>,nOct = <span class="number">377</span></span><br></pre></td></tr></table></figure><h3 id="格式化输出浮点数"><a href="#格式化输出浮点数" class="headerlink" title="格式化输出浮点数"></a>格式化输出浮点数</h3><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="number">3.141592653</span>  </span><br><span class="line">print(<span class="string">'%10.3f'</span> % pi) <span class="comment">#字段宽10，精度3  </span></span><br><span class="line">print(<span class="string">"pi = %.*f"</span> % (<span class="number">3</span>,pi)) <span class="comment">#用*从后面的元组中读取字段宽度或精度  </span></span><br><span class="line">print(<span class="string">'%010.3f'</span> % pi) <span class="comment">#用0填充空白  </span></span><br><span class="line">print(<span class="string">'%-10.3f'</span> % pi) <span class="comment">#左对齐  </span></span><br><span class="line">print(<span class="string">'%+f'</span> % pi) <span class="comment">#显示正负号  </span></span><br><span class="line">pi = -pi</span><br><span class="line">print(<span class="string">'%+f'</span> % pi) <span class="comment">#显示正负号</span></span><br></pre></td></tr></table></figure><p>运算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     <span class="number">3.142</span></span><br><span class="line">pi = <span class="number">3.142</span></span><br><span class="line"><span class="number">000003.142</span></span><br><span class="line"><span class="number">3.142</span></span><br><span class="line">+<span class="number">3.141593</span></span><br><span class="line"><span class="number">-3.141593</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数字类型&quot;&gt;&lt;a href=&quot;#数字类型&quot; class=&quot;headerlink&quot; title=&quot;数字类型&quot;&gt;&lt;/a&gt;数字类型&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;中数字有四种类型：整数、布尔型、浮点数和复数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;int&lt;/strong&gt; (整型), 如 1, 只有一种整数类型 &lt;code&gt;int&lt;/code&gt;，表示为长整型，没有&lt;code&gt;python2&lt;/code&gt; 中的 &lt;code&gt;long&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bool&lt;/strong&gt; (布尔型), 如&lt;code&gt;True&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;float&lt;/strong&gt; (浮点型), 如 &lt;code&gt;1.23&lt;/code&gt;、&lt;code&gt;3E-2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;complex&lt;/strong&gt; (复数型), 如 &lt;code&gt;1 + 2j&lt;/code&gt;、 &lt;code&gt;1.1 + 2.2j&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.jbblogs.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://www.jbblogs.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记（一）——学习资源及参考资料</title>
    <link href="https://www.jbblogs.cn/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E5%8F%8A%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    <id>https://www.jbblogs.cn/Python学习笔记（一）——学习资源及参考资料/</id>
    <published>2019-05-13T16:26:41.000Z</published>
    <updated>2019-05-13T17:11:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>环境：Python3基于Windows平台</p><p>参考资料：</p><p>《Python编程: 从入门到实践》 (美)EricMatthes,袁国忠——<a href="https://pan.baidu.com/s/1tIy4PFLFqDm88Ir-TsRSoQ" target="_blank" rel="noopener">电子版传送门（提取码：269c）</a></p><p>Python - 100天从新手到大师——<a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Github传送门</a></p><p>不定期更新中······</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境：Python3基于Windows平台&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;《Python编程: 从入门到实践》 (美)EricMatthes,袁国忠——&lt;a href=&quot;https://pan.baidu.com/s/1tIy4PFLFqDm88Ir-TsRSoQ
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.jbblogs.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://www.jbblogs.cn/tags/Python/"/>
    
      <category term="学习资源" scheme="https://www.jbblogs.cn/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>VS Code配置C/C++</title>
    <link href="https://www.jbblogs.cn/VS-Code%E9%85%8D%E7%BD%AEC++/"/>
    <id>https://www.jbblogs.cn/VS-Code配置C++/</id>
    <published>2019-04-28T06:27:48.000Z</published>
    <updated>2019-05-09T15:26:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开始安装之前，请先确认你满足以下几个条件。<br>1、首先，你有一台电脑，并且已经连接到网络。（受你当前网速的影响，安装过程可能会花费10几分钟或1个小时以上的时间。）<br>2、其次，你的电脑硬盘有500MB的剩余空间。</p><a id="more"></a><h1 id="下载MinGw-w64"><a href="#下载MinGw-w64" class="headerlink" title="下载MinGw-w64"></a>下载MinGw-w64</h1><h4 id="点击链接从sourceforge官网下载MinGw-w64"><a href="#点击链接从sourceforge官网下载MinGw-w64" class="headerlink" title="点击链接从sourceforge官网下载MinGw-w64"></a>点击<a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/" target="_blank" rel="noopener">链接</a>从sourceforge官网下载MinGw-w64</h4><p><a href="https://imgchr.com/i/E2mYFS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/09/E2mYFS.md.png" alt="E2mYFS.md.png"></a></p><p>点击图片中的“Download Latest Version”下载最新版本的MinGW-w64。</p><h1 id="安装MinGw-w64"><a href="#安装MinGw-w64" class="headerlink" title="安装MinGw-w64"></a>安装MinGw-w64</h1><p>下载完成后，你会看到这样的窗口，猜猜点哪个！</p><p><img src="https://s2.ax1x.com/2019/05/09/E2eziF.png" alt="E2eziF.png"></p><p>猜到正确答案的小朋友会看到这样的窗口</p><p>!<img src="https://s2.ax1x.com/2019/05/09/E2mPMR.png" alt="E2mPMR.png"></p><p>按照这个选</p><p><img src="https://s2.ax1x.com/2019/05/09/E2mVIO.png" alt="E2mVIO.png"></p><p>然后你会看到这个：</p><p><img src="https://s2.ax1x.com/2019/05/09/E2mFqx.png" alt="E2mFqx.png"></p><p>可以根据需要在红框内更改安装路径。如果不需要改安装路径直接点下一步即可。</p><p><img src="https://s2.ax1x.com/2019/05/09/E2mpRJ.png" alt="E2mpRJ.png"></p><p>等待一会儿，等待的时间取决于你的网速，如果嫌太慢可以把<del>电脑砸了</del>。</p><p><del>稍微等一会</del>你就会看到这个窗口：</p><p><a href="https://imgchr.com/i/E2mis1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/09/E2mis1.png" alt="E2mis1.png"></a></p><p>这说明MinGw-w64已经下载完成：</p><p><img src="https://s2.ax1x.com/2019/05/09/E2mAZ6.png" alt="E2mAZ6.png"></p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>在此电脑图标处点击鼠标右键，选择属性：打开系统面板。</p><p>!<img src="https://s2.ax1x.com/2019/05/09/E2mmJe.png" alt="E2mmJe.png"></p><p>点击红框中的高级系统设置。</p><p><img src="https://s2.ax1x.com/2019/05/09/E2muzd.png" alt="E2muzd.png"></p><p>点击环境变量</p><p><a href="https://imgchr.com/i/E2meiD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/09/E2meiD.md.png" alt="E2meiD.md.png"></a></p><p>选择红框中的Path后点击编辑</p><p><img src="https://s2.ax1x.com/2019/05/09/E2mnRH.png" alt="E2mnRH.png">点击编辑按钮，填入bin文件夹的路径 。bin文件夹在哪？找一找你MinGW-w64的安装目录。</p><h1 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h1><p>进入命令提示符界面输入gcc -v（命令提示符界面怎么进呢？你猜猜？），之后如果出现红框内的字符说明你已<del>功德圆满</del>了。</p><p><a href="https://imgchr.com/i/E2mEdK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/09/E2mEdK.md.png" alt="E2mEdK.md.png"></a></p><h1 id="安装VS-Code"><a href="#安装VS-Code" class="headerlink" title="安装VS Code"></a>安装VS Code</h1><p>怎么安装？</p><p><a href="https://imgchr.com/i/E2m3eP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/09/E2m3eP.jpg" alt="E2m3eP.jpg"></a></p><h1 id="安装CPPTools插件"><a href="#安装CPPTools插件" class="headerlink" title="安装CPPTools插件"></a>安装CPPTools插件</h1><p>优秀的你已成功安装了VS Code，接下来依次点击即可：</p><p><a href="https://imgchr.com/i/E2mMQA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/09/E2mMQA.md.png" alt="E2mMQA.md.png"></a></p><h1 id="修改VS-Code调试配置文件"><a href="#修改VS-Code调试配置文件" class="headerlink" title="修改VS Code调试配置文件"></a>修改VS Code调试配置文件</h1><p>在系统任意位置新建一个文件夹，在VSCode打开该文件夹，然后新建一个CPP文件，写一个简单但是完整的代码，比如<del>像我这样的</del>。</p><p><img src="https://s2.ax1x.com/2019/05/09/E2mGo8.png" alt="E2mGo8.png"></p><p>然后在.vscode文件夹下创建四个文件，文件名为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c_cpp_properties.json</span><br><span class="line">launch.json</span><br><span class="line">settings.json</span><br><span class="line">tasks.json</span><br></pre></td></tr></table></figure><p>每个文件下的代码如下：</p><p>c_cpp_properties.json:(文件路径需修改)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"MinGW64"</span>,</span><br><span class="line">            <span class="attr">"intelliSenseMode"</span>: <span class="string">"gcc-x64"</span>,</span><br><span class="line">            <span class="attr">"compilerPath"</span>: <span class="string">"D:\\软件\\MinGW\\mingw64\\bin\\g++.exe"</span>, </span><br><span class="line">            <span class="attr">"includePath"</span>: [  </span><br><span class="line">                <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">                <span class="string">"D:/软件/MinGW/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/**"</span>,</span><br><span class="line">                <span class="string">"D:/软件/MinGW/mingw64/x86_64-w64-mingw32/include/**"</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">            <span class="attr">"browse"</span>: &#123;</span><br><span class="line">                <span class="attr">"path"</span>: [</span><br><span class="line">                    <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">                    <span class="string">"D:/软件/MinGW/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/**"</span>,</span><br><span class="line">                    <span class="string">"D:/软件/MinGW/mingw64/x86_64-w64-mingw32/include/**"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"limitSymbolsToIncludedHeaders"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"databaseFilename"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"cStandard"</span>: <span class="string">"c11"</span>,</span><br><span class="line">            <span class="attr">"cppStandard"</span>: <span class="string">"c++17"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>launch.json：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            "name": "C++ Launch (GDB)",                 // 配置名称，将会在启动配置的下拉菜单中显示</span><br><span class="line">            "type": "cppdbg",                           // 配置类型，这里只能为cppdbg</span><br><span class="line">            "request": "launch",                        // 请求配置类型，可以为launch（启动）或attach（附加）</span><br><span class="line">            "targetArchitecture": "x64",                // 生成目标架构，一般为x86或x64</span><br><span class="line">            "program": "$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe", // 重点！将要进行调试的程序的路径</span><br><span class="line">            "args": [],                                 // 程序调试时传递给程序的命令行参数，一般设为空即可</span><br><span class="line">            "stopAtEntry": false,                       // 设为true时程序将暂停在程序入口处，一般设置为false</span><br><span class="line">            "cwd": "$&#123;workspaceRoot&#125;",                  // 调试程序时的工作目录，一般为$&#123;workspaceRoot&#125;</span><br><span class="line">            "externalConsole": true,                    // 调试时是否显示控制台窗口，一般设置为true显示控制台</span><br><span class="line">            "internalConsoleOptions": "neverOpen",      // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡",</span><br><span class="line">            "MIMode": "gdb",                            // 指定连接的调试器</span><br><span class="line">            "miDebuggerPath": "D:\\软件\\MinGW\\mingw64\\bin\\gdb.exe", //重点！ 调试器路径</span><br><span class="line">            "setupCommands": [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for GDB"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            "preLaunchTask": "Compile" </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>settings.json:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;C_Cpp.intelliSenseEngineFallback&quot;: &quot;Enabled&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tasks.json:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"Compile"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"g++"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,   //指定编译源代码文件</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe"</span>, //重点！ 指定输出文件名，不加该参数则默认输出a.exe</span><br><span class="line">                <span class="string">"-ggdb3"</span>,   // 生成和调试有关的信息</span><br><span class="line">                <span class="string">"-Wall"</span>,    // 开启额外警告</span><br><span class="line">                <span class="string">"-static-libgcc"</span>,   // 静态链接</span><br><span class="line">                <span class="string">"-std=c++17"</span>,       // 使用c++<span class="number">17</span>标准</span><br><span class="line">                <span class="string">"-finput-charset=UTF-8"</span>, //输入编译器文本编码 默认为UTF<span class="number">-8</span></span><br><span class="line">                <span class="string">"-fexec-charset=GBK"</span>,   //输出exe文件的编码</span><br><span class="line">                <span class="string">"-D _USE_MATH_DEFINES"</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">            <span class="attr">"problemMatcher"</span>: &#123;</span><br><span class="line">                <span class="attr">"owner"</span>: <span class="string">"cpp"</span>,</span><br><span class="line">                <span class="attr">"fileLocation"</span>: [</span><br><span class="line">                    <span class="string">"absolute"</span>,</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"pattern"</span>: &#123;</span><br><span class="line">                    <span class="attr">"regexp"</span>: <span class="string">"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$"</span>,</span><br><span class="line">                    <span class="attr">"file"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"line"</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">"column"</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">"severity"</span>: <span class="number">4</span>,</span><br><span class="line">                    <span class="attr">"message"</span>: <span class="number">5</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">"presentation"</span>: &#123;</span><br><span class="line">                <span class="attr">"echo"</span>: <span class="literal">true</span>,</span><br><span class="line">                "reveal": "always", // 在“终端”中显示编译信息的策略，可以为always，silent，never</span><br><span class="line">                 "focus": false,</span><br><span class="line">                 "panel": "shared" // 不同的文件的编译信息共享一个终端面板</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完以上文件后，直接编译运行就可以了。</p><p>如果遇到问题请留言，我会一一解答！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开始安装之前，请先确认你满足以下几个条件。&lt;br&gt;1、首先，你有一台电脑，并且已经连接到网络。（受你当前网速的影响，安装过程可能会花费10几分钟或1个小时以上的时间。）&lt;br&gt;2、其次，你的电脑硬盘有500MB的剩余空间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="https://www.jbblogs.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="VS Code" scheme="https://www.jbblogs.cn/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>malloc函数详解</title>
    <link href="https://www.jbblogs.cn/malloc%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.jbblogs.cn/malloc函数详解/</id>
    <published>2019-04-07T14:46:35.000Z</published>
    <updated>2019-04-10T07:54:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数定义及原理"><a href="#函数定义及原理" class="headerlink" title="函数定义及原理"></a>函数定义及原理</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_bytes)</span></span>;<span class="comment">//函数原型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;//头文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;<span class="comment">//函数声明</span></span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>malloc函数接收一个参数：所需的内存字节数。malloc会根据这个参数找到合适的空闲内存块，然后返回动态内存块的首字节地址。这个内存块是匿名的，malloc函数并不会为其赋名。因此我们需要将该地址赋值给一个指针变量，然后通过指针变量来访问这块内存。</p><p>如果内存分配成功，malloc函数会返回一个（void*）类型的指针，在C、C++中规定该指针可以被强制转换成任何类型的指针，因此malloc函数可以用于返回指向数组的指针、指向结构的指针等而不用考虑类型匹配的问题。</p><p>如果内存分配失败，则会返回空指针（NULL）。利用这个特性，我们必须在每次使用malloc函数后检查内存是否分配成功。</p><a id="more"></a><h1 id="使用malloc函数创建动态数组"><a href="#使用malloc函数创建动态数组" class="headerlink" title="使用malloc函数创建动态数组"></a>使用malloc函数创建动态数组</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> * ptd;</span><br><span class="line">ptd = (<span class="keyword">double</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br></pre></td></tr></table></figure><p>这段代码中，malloc函数为30个double类型的值请求内存空间，然后使用强制类型转换将返回的指针转换成（double*）类型，然后赋值给ptd，即设置ptd指向所分配内存块的首元素。回忆数组的定义，数组名即为数组首元素的地址。我们将ptd指向内存块的首元素，便可以像使用数组名一样使用它。即用ptd[0]访问内存块的首元素，用ptd[1]访问内存块的第二个元素······</p><p>利用这个方法可以创建动态数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> ptd[n];</span><br></pre></td></tr></table></figure><p>通常我们执行程序时程序会报错（C99后可以使用），因此我们可以使用以下方法来创建动态数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> *ptd = ptd = (<span class="keyword">double</span>*)<span class="built_in">malloc</span>( n * <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br></pre></td></tr></table></figure><h1 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h1><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>在C语言中，通常把变量分为静态存储变量和动态存储变量两类。静态存储变量是指在程序运行期间分配了固定存储空间的变量；动态存储变量是指在程序运行期间根据实际需要进行动态地分配存储空间的变量。在内存中供用户使用的内存空间分为三部分：</p><blockquote><ul><li>程序存储区</li><li>静态存储区</li><li>动态存储区</li></ul></blockquote><p>程序中使用的数据分别存放在静态存储区和动态存储区中，静态存储区数据在程序的开始就分配好内存区。也就是说静态内存的数量在编译时时固定的，在程序运行期间也不会改变，在程序结束时自动释放。但是动态内存的数量只会增加，除非使用free进行释放。我们来看一段程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> glad[<span class="number">2000</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)</span><br><span class="line">        gobble(glad,<span class="number">2000</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gobble</span><span class="params">(<span class="keyword">double</span> ar[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> * temp =(<span class="keyword">double</span>*)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第一次调用gobble函数时，它创建了一个指针temp，并为其分配了8*2000=16000字节的内存，在函数结束时，作为自动变量的指针temp会消失，但是系统并不会为我们自动释放这16000字节的内存。因此这块内存区域依旧存在，但由于temp指针已经消失，因此无法访问这块内存空间，同时它也无法被重复使用。</p><p>主函数多次调用了gobble函数，当for循环执行结束，程序总共调用了1000次gobble函数，也就造成了16000000字节的内存被占用而无法使用，通常我们称这类问题为内存泄漏。为了避免这类问题，我们需要在函数末尾使用free函数来释放内存以避免这类问题的发生。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>free函数的参数是一个指针，即之前malloc函数返回的地址。使用时将其放在函数的末尾。例如上述代码添加free函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gobble</span><span class="params">(<span class="keyword">double</span> ar[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> * temp =(<span class="keyword">double</span>*)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free函数使用的指针变量可以与malloc函数的指针变量不同，但是两个指针变量必须储存相同的地址。另外，如果被调函数使用malloc函数分配内存空间并返回指针供主调函数使用，则可以在主调函数末尾使用free函数通过该指针释放被调函数创建的内存空间，也就是说内存块可以在一个函数中创建，在另一个函数中销毁。需要注意的是，不能释放同一内存块两次。</p><h1 id="其他相关函数的使用"><a href="#其他相关函数的使用" class="headerlink" title="其他相关函数的使用"></a>其他相关函数的使用</h1><h2 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h2><p>calloc函数功能与malloc函数类似，其典型用法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> * temp = (<span class="keyword">double</span> *)<span class="built_in">calloc</span>(<span class="number">1000</span>,<span class="keyword">sizeof</span>(<span class="keyword">double</span>))</span><br></pre></td></tr></table></figure><p>calloc函数的参数是两个无符号整数，第一个参数是所需的存储单元数量，第二个参数是每个存储单元的大小。calloc函数有个特性，即在动态分配完内存后，自动初始化该内存空间为零，而malloc不初始化，里边数据是随机的垃圾数据。这是calloc与malloc最主要的区别。free函数也可以用于释放calloc分配的内存空间。</p><h2 id="realloc函数"><a href="#realloc函数" class="headerlink" title="realloc函数"></a>realloc函数</h2><p>当我们动态分配的内存不够了或者过大，我们可以使用realloc函数来调整内存的大小。其基本语法为：</p><blockquote><p>指针名=（数据类型*）realloc(要改变内存大小的指针名，新的大小)</p></blockquote><p>如果新的大小小于原内存大小，可能会导致数据的丢失；如果新的内存大小大于原内存大小，新分配的部分不会被初始化。</p><p>其原理时先判断当前指针是否有足够的连续内存空间，如果有则扩大当前地址，返回当前的指针；如果没有，则根据指定的内存大小重新寻找并分配内存空间，然后将原有数据全部拷贝至新的内存块，并自动释放原来的内存，然后返回新的内存块的首地址。</p><p>如果重新分配成功则返回指向被分配内存的指针，分配失败则返回空指针（NULL）。在函数结束时同样要使用free函数来释放内存空间。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://baike.baidu.com/item/realloc" target="_blank" rel="noopener">百度百科”realloc”</a></li><li><a href="https://baike.baidu.com/item/malloc%E5%87%BD%E6%95%B0?fromtitle=malloc&amp;fromid=659960" target="_blank" rel="noopener">百度百科”malloc”</a></li><li>《C Primer Plus》（第6版）中文版</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数定义及原理&quot;&gt;&lt;a href=&quot;#函数定义及原理&quot; class=&quot;headerlink&quot; title=&quot;函数定义及原理&quot;&gt;&lt;/a&gt;函数定义及原理&lt;/h1&gt;&lt;h2 id=&quot;函数定义&quot;&gt;&lt;a href=&quot;#函数定义&quot; class=&quot;headerlink&quot; title=&quot;函数定义&quot;&gt;&lt;/a&gt;函数定义&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num_bytes)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//函数原型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;//头文件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; size)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//函数声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;malloc函数接收一个参数：所需的内存字节数。malloc会根据这个参数找到合适的空闲内存块，然后返回动态内存块的首字节地址。这个内存块是匿名的，malloc函数并不会为其赋名。因此我们需要将该地址赋值给一个指针变量，然后通过指针变量来访问这块内存。&lt;/p&gt;
&lt;p&gt;如果内存分配成功，malloc函数会返回一个（void*）类型的指针，在C、C++中规定该指针可以被强制转换成任何类型的指针，因此malloc函数可以用于返回指向数组的指针、指向结构的指针等而不用考虑类型匹配的问题。&lt;/p&gt;
&lt;p&gt;如果内存分配失败，则会返回空指针（NULL）。利用这个特性，我们必须在每次使用malloc函数后检查内存是否分配成功。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.jbblogs.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C语言" scheme="https://www.jbblogs.cn/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Pop Sequence</title>
    <link href="https://www.jbblogs.cn/Pop%20Sequence/"/>
    <id>https://www.jbblogs.cn/Pop Sequence/</id>
    <published>2019-04-05T06:27:48.000Z</published>
    <updated>2019-05-11T09:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pop-Sequence"><a href="#Pop-Sequence" class="headerlink" title="Pop Sequence"></a>Pop Sequence</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a stack which can keep <strong><em>M</em></strong> numbers at most. Push <strong><em>N</em></strong> numbers in the order of 1, 2, 3, …, N and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. For example, if <strong><em>M</em></strong> is 5 and <strong><em>N</em></strong> is 7, we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, but not 3, 2, 1, 7, 5, 6, 4.</p><a id="more"></a><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>Each input file contains one test case. For each case, the first line contains 3 numbers (all no more than 1000): <strong><em>M</em></strong> (the maximum capacity of the stack), <strong><em>N</em></strong> (the length of push sequence), and K (the number of pop sequences to be checked). Then <strong><em>T</em></strong> lines follow, each contains a pop sequence of N numbers. All the numbers in a line are separated by a space.</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>For each pop sequence, print in one line “<strong>YES</strong>“ if it is indeed a possible pop sequence of the stack, or “<strong>NO</strong>“ if not.</p><h2 id="输入示例"><a href="#输入示例" class="headerlink" title="输入示例"></a>输入示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 7 5</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">3 2 1 7 5 6 4</span><br><span class="line">7 6 5 4 3 2 1</span><br><span class="line">5 6 4 3 7 2 1</span><br><span class="line">1 7 6 5 4 3 2</span><br></pre></td></tr></table></figure><h2 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目大意是给定一个入栈序列1，2，3，…，<strong><em>N</em></strong>，限定栈的大小为<strong><em>M</em></strong>，要求判断序列是否有可能从该栈输出。</p><blockquote><p>例如题目所给的样例：5 6 4 3 7 2 1：</p><ol><li>我们根据第一个出栈元素为5可以判断在5出栈前，1 2 3 4都应已入栈，则下一个应入栈元素是6。</li><li>根据第二个元素为6可知，6出栈前栈里的元素为1 2 3 4 6；下一个进栈元素是7。</li><li>根据第三个元素是4，第四个元素是3可知，7进栈前栈里的元素是1 2 ；7出栈后2，1分别出栈。整个过程符合1，2，3，…，N的入栈顺序，故该序列合法。</li></ol></blockquote><p>因此，若出现【栈顶元素大于待出栈的元素】或者【栈顶元素小于待出栈的元素】但【栈已满】的情况，则说明这个待出栈的元素是不可能出现的，据此可以判断该出栈序列不合法。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="链表栈"><a href="#链表栈" class="headerlink" title="链表栈"></a>链表栈</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> *base;</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line">&#125;*<span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">int</span> m, n, t;</span><br><span class="line"><span class="function"><span class="built_in">stack</span> <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">stack</span> s = (<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">s-&gt;base = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(size * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">if</span> (!s-&gt;base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;top = <span class="number">0</span>;</span><br><span class="line">s-&gt;size = size;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="built_in">stack</span> s,<span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s-&gt;top == s-&gt;size)<span class="comment">//栈已满</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"FULL"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;base[++(s-&gt;top)] = e;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="built_in">stack</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s-&gt;top == <span class="number">0</span>)<span class="comment">//栈为空</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"EMPTY"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="built_in">stack</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">s-&gt;top = <span class="number">0</span>;<span class="comment">//注意这里要重新设置栈顶位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; flag; i++)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">while</span> ((s-&gt;base[s-&gt;top] != <span class="built_in">array</span>[i] || s-&gt;top == <span class="number">0</span>)&amp;&amp;flag)<span class="comment">//【栈为空】或【栈顶元素与待比较的出栈元素不等】</span></span><br><span class="line">&#123;</span><br><span class="line">push(s, now);</span><br><span class="line"><span class="keyword">if</span> (s-&gt;top==s-&gt;size &amp;&amp; s-&gt;base[s-&gt;top] != <span class="built_in">array</span>[i]) <span class="comment">//若【栈已满且栈顶元素仍然小于待比较的出栈元素】</span></span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">now++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( flag &amp;&amp; s-&gt;base[s-&gt;top] == <span class="built_in">array</span>[i] &amp;&amp; s-&gt;top &gt;= <span class="number">1</span>)<span class="comment">//若【栈非空且栈顶元素等于待比较的出栈元素】</span></span><br><span class="line">pop(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; t;</span><br><span class="line"><span class="keyword">int</span> *<span class="built_in">array</span> = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">stack</span> s = CreateStack(m);</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">array</span>[i];</span><br><span class="line">Check(<span class="built_in">array</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(s-&gt;base);</span><br><span class="line"><span class="built_in">free</span>(<span class="built_in">array</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组栈"><a href="#数组栈" class="headerlink" title="数组栈"></a>数组栈</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n, t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; t;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[<span class="number">1005</span>];<span class="comment">//栈</span></span><br><span class="line"><span class="keyword">while</span> (t--)<span class="comment">//遍历每一个序列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>;<span class="comment">//栈顶元素</span></span><br><span class="line"><span class="keyword">int</span> num;<span class="comment">//待比较的出栈元素</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;<span class="comment">//判断标志</span></span><br><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//遍历每一个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">while</span> ((top == <span class="number">0</span> || num != <span class="built_in">stack</span>[top]) &amp;&amp; flag)<span class="comment">//栈为空或者待出栈元素与栈顶元素不相等</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[++top] = now;</span><br><span class="line"><span class="keyword">if</span> (top &gt; m)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">now++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num == <span class="built_in">stack</span>[top] &amp;&amp; flag &amp;&amp; top &gt;= <span class="number">1</span>)<span class="comment">//栈不为空且......</span></span><br><span class="line">&#123;</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Pop-Sequence&quot;&gt;&lt;a href=&quot;#Pop-Sequence&quot; class=&quot;headerlink&quot; title=&quot;Pop Sequence&quot;&gt;&lt;/a&gt;Pop Sequence&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;Given a stack which can keep &lt;strong&gt;&lt;em&gt;M&lt;/em&gt;&lt;/strong&gt; numbers at most. Push &lt;strong&gt;&lt;em&gt;N&lt;/em&gt;&lt;/strong&gt; numbers in the order of 1, 2, 3, …, N and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. For example, if &lt;strong&gt;&lt;em&gt;M&lt;/em&gt;&lt;/strong&gt; is 5 and &lt;strong&gt;&lt;em&gt;N&lt;/em&gt;&lt;/strong&gt; is 7, we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, but not 3, 2, 1, 7, 5, 6, 4.&lt;/p&gt;
    
    </summary>
    
    
      <category term="习题" scheme="https://www.jbblogs.cn/tags/%E4%B9%A0%E9%A2%98/"/>
    
      <category term="数据结构" scheme="https://www.jbblogs.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>String Task</title>
    <link href="https://www.jbblogs.cn/String-Task/"/>
    <id>https://www.jbblogs.cn/String-Task/</id>
    <published>2019-04-04T05:49:59.000Z</published>
    <updated>2019-04-11T16:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>A. String Task</strong><br>Petya started to attend programming lessons. On the first lesson his task was to write a simple program. The program was supposed to do the following: in the given string, consisting if uppercase and lowercase Latin letters, it:</p><ol><li>deletes all the vowels,</li><li>inserts a character “.” before each consonant,</li><li>replaces all uppercase consonants with corresponding lowercase ones.</li></ol><p>Vowels are letters “A”, “O”, “Y”, “E”, “U”, “I”, and the rest are consonants. The program’s input is exactly one string, it should return the output as a single string, resulting after the program’s processing the initial string.</p><p>Help Petya cope with this easy task.</p><p><strong>Input</strong><br>The first line represents input string of Petya’s program. This string only consists of uppercase and lowercase Latin letters and its length is from 1 to 100, inclusive.</p><p><strong>Output</strong><br>Print the resulting string. It is guaranteed that this string is not empty.</p><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>给定字符串，包含大小写的拉丁字母</p><ol><li>删除所有元音，</li><li>在每个辅音之前插入“ . ”，</li><li>将所有大写辅音替换成相应的小写辅音；</li><li>元音字母包含 A，O，Y，E，U，I；</li><li>程序输入是一个字符串，它以单个字符串的形式返回输出，这是程序处理初始字符串后的结果</li></ol><p><strong>Input</strong></p><p>第一行表示输入的字符串，改字符串仅由大写和小写拉丁字母组成，长度从0~100；<br><strong>Output</strong><br>打印结果字符串，可以保证这个字符串不为空。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>​       分别定义一个输入的字符串in[100]和输出的字符串ou[100]，将输出的字符串ou[100]的所有字符初始化为 ‘ . ‘ ；然后先将输入字符串的所有大写字母转换为小写；之后通过if语句判断是否为辅音字母；是辅音字母则间位提取至输出字符串ou[100]中。最后所得到的ou[100]则可以直接输出。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> in[<span class="number">100</span>],ou[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">ou[i] = <span class="string">'.'</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt;in;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>, num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(in);i++)<span class="comment">//逐个查找</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (in[i] &gt;= <span class="number">65</span> &amp;&amp; in[i] &lt;= <span class="number">90</span>)</span><br><span class="line">in[i] += <span class="number">32</span>;<span class="comment">//将所有字母转换成小写</span></span><br><span class="line"><span class="keyword">if</span> (in[i] != <span class="string">'a'</span> &amp;&amp; in[i] != <span class="string">'o'</span> &amp;&amp; in[i] != <span class="string">'y'</span> &amp;&amp; in[i] != <span class="string">'e'</span> &amp;&amp; in[i] != <span class="string">'u'</span> &amp;&amp;in[i] != <span class="string">'i'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ou[j] = in[i];</span><br><span class="line">num++;</span><br><span class="line">j += <span class="number">2</span>;</span><br><span class="line">&#125;<span class="comment">//如果是辅音则间位提取</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span> * num; j++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ou[j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;A. String Task&lt;/strong&gt;&lt;br&gt;Petya started to attend programming lessons. On the first lesson his task was to write a simple program. The program was supposed to do the following: in the given string, consisting if uppercase and lowercase Latin letters, it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;deletes all the vowels,&lt;/li&gt;
&lt;li&gt;inserts a character “.” before each consonant,&lt;/li&gt;
&lt;li&gt;replaces all uppercase consonants with corresponding lowercase ones.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Vowels are letters “A”, “O”, “Y”, “E”, “U”, “I”, and the rest are consonants. The program’s input is exactly one string, it should return the output as a single string, resulting after the program’s processing the initial string.&lt;/p&gt;
&lt;p&gt;Help Petya cope with this easy task.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;br&gt;The first line represents input string of Petya’s program. This string only consists of uppercase and lowercase Latin letters and its length is from 1 to 100, inclusive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;Print the resulting string. It is guaranteed that this string is not empty.&lt;/p&gt;
    
    </summary>
    
    
      <category term="习题" scheme="https://www.jbblogs.cn/tags/%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
</feed>
